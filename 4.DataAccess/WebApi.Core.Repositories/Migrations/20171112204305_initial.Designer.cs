// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebApi.Core.Repositories.Core;

namespace WebApi.Core.Repositories.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20171112204305_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.Claim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .HasColumnName("ClaimType")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ClaimValue")
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClientId")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Active")
                        .HasColumnName("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedOrigin")
                        .IsRequired()
                        .HasColumnName("AllowedOrigin")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasColumnName("ApplicationType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RefreshTokenLifeTime")
                        .HasColumnName("RefreshTokenLifeTime")
                        .HasColumnType("int");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnName("Secret")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.ExternalLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("LoginProvider")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("ProviderKey")
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalLogins");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnName("ExpiresUtc")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnName("IssuedUtc")
                        .HasColumnType("DateTime");

                    b.Property<string>("ProtectedTicket")
                        .IsRequired()
                        .HasColumnName("ProtectedTicket")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(50);

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnName("TokenId")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("AboutInfo");

                    b.Property<long>("CityId")
                        .HasColumnName("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnName("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Gender")
                        .HasColumnName("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("SecurityStamp")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.UserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Localization.KeyGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("KeyGroupCode")
                        .IsRequired()
                        .HasColumnName("KeyGroup")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LocalizationKeys")
                        .IsRequired()
                        .HasColumnName("LocalizationKeys")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("Id");

                    b.ToTable("KeyGroups");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Localization.LocalizationKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("EnglishValue")
                        .IsRequired()
                        .HasColumnName("EnglishValue")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("IrishValue")
                        .IsRequired()
                        .HasColumnName("IrishValue")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocalizationKeyCode")
                        .IsRequired()
                        .HasColumnName("LocalizationKey")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("LocalizationKeys");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Location.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnName("CityName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("CountryId");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Location.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnName("CountryCode")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("CountryName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Queues.EmailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AttachedFiles")
                        .HasColumnName("AttachedFiles")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasColumnName("EmailSubject")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("ErrorMessage")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("FromEmailId")
                        .IsRequired()
                        .HasColumnName("FromEmailId")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSucceedEmailSent")
                        .HasColumnName("IsSucceedEmailSent")
                        .HasColumnType("bit");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnName("MessageBody")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("ToEmailId")
                        .IsRequired()
                        .HasColumnName("ToEmailId")
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("EmailQueues");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Queues.PdfQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CriminalId")
                        .HasColumnName("CriminalId")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("ErrorMessage")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("GeneratedHtml")
                        .IsRequired()
                        .HasColumnName("GeneratedHtml")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("IsPdfGenerationSucceed")
                        .HasColumnName("IsPdfGenerationSucceed")
                        .HasColumnType("bit");

                    b.Property<bool>("ReGenerationRequired")
                        .HasColumnName("ReGenerationRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PdfQueues");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Queues.RequestQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("ErrorMessage")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("IsRequestSucceed")
                        .HasColumnName("IsRequestSucceed")
                        .HasColumnType("bit");

                    b.Property<string>("SearchParameters")
                        .IsRequired()
                        .HasColumnName("SearchParameters")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("Id");

                    b.ToTable("RequestQueues");
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.Claim", b =>
                {
                    b.HasOne("WebApi.Core.EntityModels.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.ExternalLogin", b =>
                {
                    b.HasOne("WebApi.Core.EntityModels.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.RefreshToken", b =>
                {
                    b.HasOne("WebApi.Core.EntityModels.Identity.Client", "Client")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Identity.UserRole", b =>
                {
                    b.HasOne("WebApi.Core.EntityModels.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Core.EntityModels.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApi.Core.EntityModels.Location.City", b =>
                {
                    b.HasOne("WebApi.Core.EntityModels.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
